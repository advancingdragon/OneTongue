[ [ 'stat',
    [ 'Digit' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'Char' ] ],
      [ 'And',
        [ 'Ge', [ 'var', 'x' ], '0' ],
        [ 'Le', [ 'var', 'x' ], '9' ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'Number' ],
    [ 'seq',
      [ 'set', 'cs', [ 'plus', [ 'call', 'Digit' ] ] ],
      [ 'call', 'ToInt', [ 'var', 'cs' ] ] ] ],
  [ 'stat',
    [ 'RelOp' ],
    [ 'alt',
      [ 'seq',
        [ 'call', 'Token', [ 'list', '==' ] ],
        [ 'list', 'eq' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '<>' ] ],
        [ 'list', 'ne' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '<=' ] ],
        [ 'list', 'le' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '>=' ] ],
        [ 'list', 'ge' ] ],
      [ 'seq', [ 'call', 'Token', [ 'list', '<' ] ], [ 'list', 'lt' ] ],
      [ 'seq', [ 'call', 'Token', [ 'list', '>' ] ], [ 'list', 'gt' ] ] ] ],
  [ 'stat',
    [ 'AddOp' ],
    [ 'alt',
      [ 'seq',
        [ 'call', 'Token', [ 'list', '+' ] ],
        [ 'list', 'add' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '-' ] ],
        [ 'list', 'sub' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', 'or' ] ],
        [ 'list', 'or' ] ] ] ],
  [ 'stat',
    [ 'MulOp' ],
    [ 'alt',
      [ 'seq',
        [ 'call', 'Token', [ 'list', '*' ] ],
        [ 'list', 'mul' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '/' ] ],
        [ 'list', 'div' ] ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', 'and' ] ],
        [ 'list', 'and' ] ] ] ],
  [ 'stat',
    [ 'Comp' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'Expr' ] ],
      [ 'star',
        [ 'seq',
          [ 'set', 'op', [ 'call', 'RelOp' ] ],
          [ 'set', 'y', [ 'call', 'Expr' ] ],
          [ 'set',
            'x',
            [ 'list', [ [ 'var', 'op' ], [ 'var', 'x' ], [ 'var', 'y' ] ] ] ] ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'Expr' ],
    [ 'alt',
      [ 'seq',
        [ 'call', 'Token', [ 'list', '-' ] ],
        [ 'set', 'x', [ 'call', 'Term' ] ],
        [ 'set', 'x', [ 'list', [ [ 'list', 'neg' ], [ 'var', 'x' ] ] ] ],
        [ 'star',
          [ 'seq',
            [ 'set', 'op', [ 'call', 'AddOp' ] ],
            [ 'set', 'y', [ 'call', 'Term' ] ],
            [ 'set',
              'x',
              [ 'list', [ [ 'var', 'op' ], [ 'var', 'x' ], [ 'var', 'y' ] ] ] ] ] ],
        [ 'var', 'x' ] ],
      [ 'seq',
        [ 'set', 'x', [ 'call', 'Term' ] ],
        [ 'star',
          [ 'seq',
            [ 'set', 'op', [ 'call', 'AddOp' ] ],
            [ 'set', 'y', [ 'call', 'Term' ] ],
            [ 'set',
              'x',
              [ 'list', [ [ 'var', 'op' ], [ 'var', 'x' ], [ 'var', 'y' ] ] ] ] ] ],
        [ 'var', 'x' ] ] ] ],
  [ 'stat',
    [ 'Term' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'Factor' ] ],
      [ 'star',
        [ 'seq',
          [ 'set', 'op', [ 'call', 'MulOp' ] ],
          [ 'set', 'y', [ 'call', 'Factor' ] ],
          [ 'set',
            'x',
            [ 'list', [ [ 'var', 'op' ], [ 'var', 'x' ], [ 'var', 'y' ] ] ] ] ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'Factor' ],
    [ 'alt',
      [ 'call', 'Number' ],
      [ 'seq',
        [ 'call', 'Token', [ 'list', '(' ] ],
        [ 'set', 'x', [ 'call', 'Comp' ] ],
        [ 'call', 'Token', [ 'list', ')' ] ],
        [ 'var', 'x' ] ] ] ],
  [ 'stat',
    [ 'ListExpr' ],
    [ 'alt',
      [ 'call', 'Number' ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'neg' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ] ] ],
        [ 'call', 'Neg', [ 'var', 'x' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'mul' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Mul', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'div' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Div', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'add' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Add', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'sub' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Sub', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'eq' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Eq', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'ne' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Ne', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'le' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Le', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'ge' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Ge', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'lt' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Lt', [ 'var', 'x' ], [ 'var', 'y' ] ] ],
      [ 'seq',
        [ 'enterList',
          [ 'seq',
            [ 'enterList', [ 'matchList', 'gt' ] ],
            [ 'set', 'x', [ 'call', 'ListExpr' ] ],
            [ 'set', 'y', [ 'call', 'ListExpr' ] ] ] ],
        [ 'Gt', [ 'var', 'x' ], [ 'var', 'y' ] ] ] ] ] ]

struct oneValue *oneDigit()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
do {
x = oneChar();
vRes = x;
if (vRes == NIL) { break; }
v2 = x;
v3 = oneNewChar('0');
v1 = oneGe(v2, v3);
v5 = x;
v6 = oneNewChar('9');
v4 = oneLe(v5, v6);
vRes = oneAnd(v1, v4);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *oneNumber()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
do {
v0 = oneDigit();
if (v0 == NIL) {
cs = NIL;
} else {
cs = oneNewList();
oneAppend(cs, v0);
do {
v0 = oneDigit();
if (v0 == NIL) { break; }
oneAppend(cs, v0);
} while (0);
}
vRes = cs;
if (vRes == NIL) { break; }
v2 = cs;
vRes = oneToInt(v2);
} while (0);
}

struct oneValue *oneRelOp()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
struct oneValue *v14;
struct oneValue *v15;
struct oneValue *v16;
struct oneValue *v17;
struct oneValue *v18;
struct oneValue *v19;
struct oneValue *v20;
struct oneValue *v21;
struct oneValue *v22;
struct oneValue *v23;
do {
do {
v0 = oneNewList();
v1 = oneNewChar('=');
oneAppend(v0, v1);
v1 = oneNewChar('=');
oneAppend(v0, v1);
vRes = oneToken(v0);
if (vRes == NIL) { break; }
vRes = oneNewList();
v3 = oneNewChar('e');
oneAppend(vRes, v3);
v3 = oneNewChar('q');
oneAppend(vRes, v3);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v4 = oneNewList();
v5 = oneNewChar('<');
oneAppend(v4, v5);
v5 = oneNewChar('>');
oneAppend(v4, v5);
vRes = oneToken(v4);
if (vRes == NIL) { break; }
vRes = oneNewList();
v7 = oneNewChar('n');
oneAppend(vRes, v7);
v7 = oneNewChar('e');
oneAppend(vRes, v7);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v8 = oneNewList();
v9 = oneNewChar('<');
oneAppend(v8, v9);
v9 = oneNewChar('=');
oneAppend(v8, v9);
vRes = oneToken(v8);
if (vRes == NIL) { break; }
vRes = oneNewList();
v11 = oneNewChar('l');
oneAppend(vRes, v11);
v11 = oneNewChar('e');
oneAppend(vRes, v11);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v12 = oneNewList();
v13 = oneNewChar('>');
oneAppend(v12, v13);
v13 = oneNewChar('=');
oneAppend(v12, v13);
vRes = oneToken(v12);
if (vRes == NIL) { break; }
vRes = oneNewList();
v15 = oneNewChar('g');
oneAppend(vRes, v15);
v15 = oneNewChar('e');
oneAppend(vRes, v15);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v16 = oneNewList();
v17 = oneNewChar('<');
oneAppend(v16, v17);
vRes = oneToken(v16);
if (vRes == NIL) { break; }
vRes = oneNewList();
v19 = oneNewChar('l');
oneAppend(vRes, v19);
v19 = oneNewChar('t');
oneAppend(vRes, v19);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v20 = oneNewList();
v21 = oneNewChar('>');
oneAppend(v20, v21);
vRes = oneToken(v20);
if (vRes == NIL) { break; }
vRes = oneNewList();
v23 = oneNewChar('g');
oneAppend(vRes, v23);
v23 = oneNewChar('t');
oneAppend(vRes, v23);
} while (0);
} while (0);
}

struct oneValue *oneAddOp()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
do {
do {
v0 = oneNewList();
v1 = oneNewChar('+');
oneAppend(v0, v1);
vRes = oneToken(v0);
if (vRes == NIL) { break; }
vRes = oneNewList();
v3 = oneNewChar('a');
oneAppend(vRes, v3);
v3 = oneNewChar('d');
oneAppend(vRes, v3);
v3 = oneNewChar('d');
oneAppend(vRes, v3);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v4 = oneNewList();
v5 = oneNewChar('-');
oneAppend(v4, v5);
vRes = oneToken(v4);
if (vRes == NIL) { break; }
vRes = oneNewList();
v7 = oneNewChar('s');
oneAppend(vRes, v7);
v7 = oneNewChar('u');
oneAppend(vRes, v7);
v7 = oneNewChar('b');
oneAppend(vRes, v7);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v8 = oneNewList();
v9 = oneNewChar('o');
oneAppend(v8, v9);
v9 = oneNewChar('r');
oneAppend(v8, v9);
vRes = oneToken(v8);
if (vRes == NIL) { break; }
vRes = oneNewList();
v11 = oneNewChar('o');
oneAppend(vRes, v11);
v11 = oneNewChar('r');
oneAppend(vRes, v11);
} while (0);
} while (0);
}

struct oneValue *oneMulOp()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
do {
do {
v0 = oneNewList();
v1 = oneNewChar('*');
oneAppend(v0, v1);
vRes = oneToken(v0);
if (vRes == NIL) { break; }
vRes = oneNewList();
v3 = oneNewChar('m');
oneAppend(vRes, v3);
v3 = oneNewChar('u');
oneAppend(vRes, v3);
v3 = oneNewChar('l');
oneAppend(vRes, v3);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v4 = oneNewList();
v5 = oneNewChar('/');
oneAppend(v4, v5);
vRes = oneToken(v4);
if (vRes == NIL) { break; }
vRes = oneNewList();
v7 = oneNewChar('d');
oneAppend(vRes, v7);
v7 = oneNewChar('i');
oneAppend(vRes, v7);
v7 = oneNewChar('v');
oneAppend(vRes, v7);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v8 = oneNewList();
v9 = oneNewChar('a');
oneAppend(v8, v9);
v9 = oneNewChar('n');
oneAppend(v8, v9);
v9 = oneNewChar('d');
oneAppend(v8, v9);
vRes = oneToken(v8);
if (vRes == NIL) { break; }
vRes = oneNewList();
v11 = oneNewChar('a');
oneAppend(vRes, v11);
v11 = oneNewChar('n');
oneAppend(vRes, v11);
v11 = oneNewChar('d');
oneAppend(vRes, v11);
} while (0);
} while (0);
}

struct oneValue *oneComp()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
do {
x = oneExpr();
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
op = oneRelOp();
v1 = op;
if (v1 == NIL) { break; }
y = oneExpr();
v1 = y;
if (v1 == NIL) { break; }
x = oneNewList();
v4 = op;
oneAppend(x, v4);
v4 = x;
oneAppend(x, v4);
v4 = y;
oneAppend(x, v4);
v1 = x;
} while (0);
if (v1 == NIL) { break; }
oneAppend(vRes, v1);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *oneExpr()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
struct oneValue *v14;
do {
do {
v0 = oneNewList();
v1 = oneNewChar('-');
oneAppend(v0, v1);
vRes = oneToken(v0);
if (vRes == NIL) { break; }
x = oneTerm();
vRes = x;
if (vRes == NIL) { break; }
x = oneNewList();
v4 = oneNewList();
v5 = oneNewChar('n');
oneAppend(v4, v5);
v5 = oneNewChar('e');
oneAppend(v4, v5);
v5 = oneNewChar('g');
oneAppend(v4, v5);
oneAppend(x, v4);
v4 = x;
oneAppend(x, v4);
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
op = oneAddOp();
v6 = op;
if (v6 == NIL) { break; }
y = oneTerm();
v6 = y;
if (v6 == NIL) { break; }
x = oneNewList();
v9 = op;
oneAppend(x, v9);
v9 = x;
oneAppend(x, v9);
v9 = y;
oneAppend(x, v9);
v6 = x;
} while (0);
if (v6 == NIL) { break; }
oneAppend(vRes, v6);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
x = oneTerm();
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
op = oneAddOp();
v11 = op;
if (v11 == NIL) { break; }
y = oneTerm();
v11 = y;
if (v11 == NIL) { break; }
x = oneNewList();
v14 = op;
oneAppend(x, v14);
v14 = x;
oneAppend(x, v14);
v14 = y;
oneAppend(x, v14);
v11 = x;
} while (0);
if (v11 == NIL) { break; }
oneAppend(vRes, v11);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
} while (0);
}

struct oneValue *oneTerm()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
do {
x = oneFactor();
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
op = oneMulOp();
v1 = op;
if (v1 == NIL) { break; }
y = oneFactor();
v1 = y;
if (v1 == NIL) { break; }
x = oneNewList();
v4 = op;
oneAppend(x, v4);
v4 = x;
oneAppend(x, v4);
v4 = y;
oneAppend(x, v4);
v1 = x;
} while (0);
if (v1 == NIL) { break; }
oneAppend(vRes, v1);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *oneFactor()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
do {
vRes = oneNumber();
if (vRes != NIL) { break; }
oneBacktrack();
do {
v1 = oneNewList();
v2 = oneNewChar('(');
oneAppend(v1, v2);
vRes = oneToken(v1);
if (vRes == NIL) { break; }
x = oneComp();
vRes = x;
if (vRes == NIL) { break; }
v5 = oneNewList();
v6 = oneNewChar(')');
oneAppend(v5, v6);
vRes = oneToken(v5);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
} while (0);
}

struct oneValue *oneListExpr()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
struct oneValue *v14;
struct oneValue *v15;
struct oneValue *v16;
struct oneValue *v17;
struct oneValue *v18;
struct oneValue *v19;
struct oneValue *v20;
struct oneValue *v21;
struct oneValue *v22;
struct oneValue *v23;
struct oneValue *v24;
struct oneValue *v25;
struct oneValue *v26;
struct oneValue *v27;
struct oneValue *v28;
struct oneValue *v29;
struct oneValue *v30;
struct oneValue *v31;
struct oneValue *v32;
struct oneValue *v33;
struct oneValue *v34;
struct oneValue *v35;
struct oneValue *v36;
struct oneValue *v37;
struct oneValue *v38;
struct oneValue *v39;
struct oneValue *v40;
struct oneValue *v41;
struct oneValue *v42;
struct oneValue *v43;
do {
vRes = oneNumber();
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("neg");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v2 = x;
vRes = oneNeg(v2);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("mul");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v6 = x;
v7 = y;
vRes = oneMul(v6, v7);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("div");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v10 = x;
v11 = y;
vRes = oneDiv(v10, v11);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("add");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v14 = x;
v15 = y;
vRes = oneAdd(v14, v15);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("sub");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v18 = x;
v19 = y;
vRes = oneSub(v18, v19);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("eq");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v22 = x;
v23 = y;
vRes = oneEq(v22, v23);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("ne");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v26 = x;
v27 = y;
vRes = oneNe(v26, v27);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("le");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v30 = x;
v31 = y;
vRes = oneLe(v30, v31);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("ge");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v34 = x;
v35 = y;
vRes = oneGe(v34, v35);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("lt");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v38 = x;
v39 = y;
vRes = oneLt(v38, v39);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
oneEnterList();
do {
oneEnterList();
vRes = oneMatchString("gt");
oneLeaveList();
if (vRes == NIL) { break; }
x = oneListExpr();
vRes = x;
if (vRes == NIL) { break; }
y = oneListExpr();
vRes = y;
} while (0);
oneLeaveList();
if (vRes == NIL) { break; }
v42 = x;
v43 = y;
vRes = oneGt(v42, v43);
} while (0);
} while (0);
}

