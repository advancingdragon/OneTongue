[ [ 'stat', [ 'expr' ], [ 'call', 'keywordExpr' ] ],
  [ 'stat',
    [ 'keywordExpr' ],
    [ 'alt',
      [ 'seq',
        [ 'set', 'x', [ 'call', 'binaryExpr' ] ],
        [ 'set', 'selArgs', [ 'call', 'keywordsAndArgs' ] ],
        [ 'concat',
          [ 'list', [ [ 'list', 'send' ], [ 'var', 'x' ] ] ],
          [ 'var', 'selArgs' ] ] ],
      [ 'call', 'binaryExpr' ] ] ],
  [ 'stat',
    [ 'keywordsAndArgs' ],
    [ 'seq',
      [ 'set', 'sel', [ 'list', '' ] ],
      [ 'set', 'args', [ 'list', [] ] ],
      [ 'plus',
        [ 'seq',
          [ 'set', 'kw', [ 'call', 'token', [ 'list', 'keyword' ] ] ],
          [ 'set', 'sel', [ 'concat', [ 'var', 'sel' ], [ 'var', 'kw' ] ] ],
          [ 'set', 'x', [ 'call', 'binaryExpr' ] ],
          [ 'set',
            'args',
            [ 'concat', [ 'var', 'args' ], [ 'var', 'x' ] ] ] ] ],
      [ 'concat', [ 'list', [ [ 'var', 'sel' ] ] ], [ 'var', 'args' ] ] ] ],
  [ 'stat',
    [ 'binaryExpr' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'unaryExpr' ] ],
      [ 'star',
        [ 'seq',
          [ 'set', 'sel', [ 'call', 'token', [ 'list', 'binarySel' ] ] ],
          [ 'set', 'x', [ 'call', 'unaryExpr' ] ],
          [ 'set',
            'x',
            [ 'list',
              [ [ 'list', 'send' ],
                [ 'var', 'x' ],
                [ 'var', 'sel' ],
                [ 'var', 'y' ] ] ] ] ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'unaryExpr' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'primary' ] ],
      [ 'star',
        [ 'seq',
          [ 'set', 'sel', [ 'call', 'token', [ 'list', 'unarySel' ] ] ],
          [ 'set',
            'x',
            [ 'list',
              [ [ 'list', 'send' ], [ 'var', 'x' ], [ 'var', 'sel' ] ] ] ] ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'primary' ],
    [ 'alt',
      [ 'call', 'token', [ 'list', 'name' ] ],
      [ 'call', 'token', [ 'list', 'number' ] ],
      [ 'seq',
        [ 'call', 'token', [ 'list', '(' ] ],
        [ 'set', 'x', [ 'call', 'expr' ] ],
        [ 'call', 'token', [ 'list', ')' ] ],
        [ 'var', 'x' ] ] ] ],
  [ 'stat',
    [ 'token', 't' ],
    [ 'alt',
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', 'name' ] ],
        [ 'call', 'spaces' ],
        [ 'call', 'name' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', 'number' ] ],
        [ 'call', 'spaces' ],
        [ 'call', 'number' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', 'keyword' ] ],
        [ 'call', 'spaces' ],
        [ 'call', 'keyword' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', 'binarySel' ] ],
        [ 'call', 'spaces' ],
        [ 'call', 'binarySel' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', 'unarySel' ] ],
        [ 'call', 'spaces' ],
        [ 'call', 'unarySel' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', '(' ] ],
        [ 'call', 'spaces' ],
        [ 'matchList', '(' ] ],
      [ 'seq',
        [ 'eq', [ 'var', 't' ], [ 'list', ')' ] ],
        [ 'call', 'spaces' ],
        [ 'matchList', ')' ] ] ] ],
  [ 'stat',
    [ 'name' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'letter' ] ],
      [ 'set',
        'xs',
        [ 'star', [ 'alt', [ 'call', 'letter' ], [ 'call', 'digit' ] ] ] ],
      [ 'concat', [ 'list', [ [ 'var', 'x' ] ] ], [ 'var', 'xs' ] ] ] ],
  [ 'stat',
    [ 'number' ],
    [ 'seq',
      [ 'set', 'cs', [ 'plus', [ 'call', 'digit' ] ] ],
      [ 'call', 'toInt', [ 'var', 'cs' ] ] ] ],
  [ 'stat',
    [ 'keyword' ],
    [ 'seq',
      [ 'set', 'n', [ 'call', 'name' ] ],
      [ 'matchList', ':' ],
      [ 'concat', [ 'var', 'n' ], [ 'list', ':' ] ] ] ],
  [ 'stat',
    [ 'binarySel' ],
    [ 'alt',
      [ 'seq',
        [ 'set', 'c1', [ 'call', 'special' ] ],
        [ 'set', 'c2', [ 'call', 'special' ] ],
        [ 'concat', [ 'var', 'c1' ], [ 'var', 'c2' ] ] ],
      [ 'seq',
        [ 'set', 'c1', [ 'call', 'special' ] ],
        [ 'var', 'c1' ] ],
      [ 'seq',
        [ 'matchList', '-' ],
        [ 'set', 'c2', [ 'call', 'special' ] ],
        [ 'concat', [ 'list', '-' ], [ 'var', 'c2' ] ] ],
      [ 'matchList', '|' ] ] ],
  [ 'stat',
    [ 'unarySel' ],
    [ 'seq',
      [ 'set', 'n', [ 'call', 'name' ] ],
      [ 'not', [ 'matchList', ':' ] ],
      [ 'var', 'n' ] ] ],
  [ 'stat',
    [ 'digit' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'char' ] ],
      [ 'and',
        [ 'ge', [ 'var', 'x' ], '0' ],
        [ 'le', [ 'var', 'x' ], '9' ] ],
      [ 'var', 'x' ] ] ],
  [ 'stat',
    [ 'letter' ],
    [ 'seq',
      [ 'set', 'x', [ 'call', 'char' ] ],
      [ 'or',
        [ 'and',
          [ 'ge', [ 'var', 'x' ], 'A' ],
          [ 'le', [ 'var', 'x' ], 'Z' ] ],
        [ 'and',
          [ 'ge', [ 'var', 'x' ], 'a' ],
          [ 'le', [ 'var', 'x' ], 'z' ] ] ],
      [ 'var', 'x' ] ] ] ]

struct oneValue *expr()
{
struct oneValue *v0;
vRes = keywordExpr();
}

struct oneValue *keywordExpr()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
do {
do {
x = binaryExpr();
vRes = x;
if (vRes == NIL) { break; }
selArgs = keywordsAndArgs();
vRes = selArgs;
if (vRes == NIL) { break; }
v2 = oneNewList();
v3 = oneNewList();
v4 = oneNewChar('s');
oneAppend(v3, v4);
v4 = oneNewChar('e');
oneAppend(v3, v4);
v4 = oneNewChar('n');
oneAppend(v3, v4);
v4 = oneNewChar('d');
oneAppend(v3, v4);
oneAppend(v2, v3);
v3 = x;
oneAppend(v2, v3);
v5 = selArgs;
vRes = concat(v2, v5);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
vRes = binaryExpr();
} while (0);
}

struct oneValue *keywordsAndArgs()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
do {
sel = oneNewList();
vRes = sel;
if (vRes == NIL) { break; }
args = oneNewList();
vRes = args;
if (vRes == NIL) { break; }
do {
v3 = oneNewList();
v4 = oneNewChar('k');
oneAppend(v3, v4);
v4 = oneNewChar('e');
oneAppend(v3, v4);
v4 = oneNewChar('y');
oneAppend(v3, v4);
v4 = oneNewChar('w');
oneAppend(v3, v4);
v4 = oneNewChar('o');
oneAppend(v3, v4);
v4 = oneNewChar('r');
oneAppend(v3, v4);
v4 = oneNewChar('d');
oneAppend(v3, v4);
kw = token(v3);
v2 = kw;
if (v2 == NIL) { break; }
v6 = sel;
v7 = kw;
sel = concat(v6, v7);
v2 = sel;
if (v2 == NIL) { break; }
x = binaryExpr();
v2 = x;
if (v2 == NIL) { break; }
v9 = args;
v10 = x;
args = concat(v9, v10);
v2 = args;
} while (0);
if (v2 == NIL) {
vRes = NIL;
} else {
vRes = oneNewList();
oneAppend(vRes, v2);
do {
do {
v3 = oneNewList();
v4 = oneNewChar('k');
oneAppend(v3, v4);
v4 = oneNewChar('e');
oneAppend(v3, v4);
v4 = oneNewChar('y');
oneAppend(v3, v4);
v4 = oneNewChar('w');
oneAppend(v3, v4);
v4 = oneNewChar('o');
oneAppend(v3, v4);
v4 = oneNewChar('r');
oneAppend(v3, v4);
v4 = oneNewChar('d');
oneAppend(v3, v4);
kw = token(v3);
v2 = kw;
if (v2 == NIL) { break; }
v6 = sel;
v7 = kw;
sel = concat(v6, v7);
v2 = sel;
if (v2 == NIL) { break; }
x = binaryExpr();
v2 = x;
if (v2 == NIL) { break; }
v9 = args;
v10 = x;
args = concat(v9, v10);
v2 = args;
} while (0);
if (v2 == NIL) { break; }
oneAppend(vRes, v2);
} while (0);
}
if (vRes == NIL) { break; }
v11 = oneNewList();
v12 = sel;
oneAppend(v11, v12);
v13 = args;
vRes = concat(v11, v13);
} while (0);
}

struct oneValue *binaryExpr()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
do {
x = unaryExpr();
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
v2 = oneNewList();
v3 = oneNewChar('b');
oneAppend(v2, v3);
v3 = oneNewChar('i');
oneAppend(v2, v3);
v3 = oneNewChar('n');
oneAppend(v2, v3);
v3 = oneNewChar('a');
oneAppend(v2, v3);
v3 = oneNewChar('r');
oneAppend(v2, v3);
v3 = oneNewChar('y');
oneAppend(v2, v3);
v3 = oneNewChar('S');
oneAppend(v2, v3);
v3 = oneNewChar('e');
oneAppend(v2, v3);
v3 = oneNewChar('l');
oneAppend(v2, v3);
sel = token(v2);
v1 = sel;
if (v1 == NIL) { break; }
x = unaryExpr();
v1 = x;
if (v1 == NIL) { break; }
x = oneNewList();
v6 = oneNewList();
v7 = oneNewChar('s');
oneAppend(v6, v7);
v7 = oneNewChar('e');
oneAppend(v6, v7);
v7 = oneNewChar('n');
oneAppend(v6, v7);
v7 = oneNewChar('d');
oneAppend(v6, v7);
oneAppend(x, v6);
v6 = x;
oneAppend(x, v6);
v6 = sel;
oneAppend(x, v6);
v6 = y;
oneAppend(x, v6);
v1 = x;
} while (0);
if (v1 == NIL) { break; }
oneAppend(vRes, v1);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *unaryExpr()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
do {
x = primary();
vRes = x;
if (vRes == NIL) { break; }
vRes = oneNewList();
do {
do {
v2 = oneNewList();
v3 = oneNewChar('u');
oneAppend(v2, v3);
v3 = oneNewChar('n');
oneAppend(v2, v3);
v3 = oneNewChar('a');
oneAppend(v2, v3);
v3 = oneNewChar('r');
oneAppend(v2, v3);
v3 = oneNewChar('y');
oneAppend(v2, v3);
v3 = oneNewChar('S');
oneAppend(v2, v3);
v3 = oneNewChar('e');
oneAppend(v2, v3);
v3 = oneNewChar('l');
oneAppend(v2, v3);
sel = token(v2);
v1 = sel;
if (v1 == NIL) { break; }
x = oneNewList();
v5 = oneNewList();
v6 = oneNewChar('s');
oneAppend(v5, v6);
v6 = oneNewChar('e');
oneAppend(v5, v6);
v6 = oneNewChar('n');
oneAppend(v5, v6);
v6 = oneNewChar('d');
oneAppend(v5, v6);
oneAppend(x, v5);
v5 = x;
oneAppend(x, v5);
v5 = sel;
oneAppend(x, v5);
v1 = x;
} while (0);
if (v1 == NIL) { break; }
oneAppend(vRes, v1);
} while (0);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *primary()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
do {
v0 = oneNewList();
v1 = oneNewChar('n');
oneAppend(v0, v1);
v1 = oneNewChar('a');
oneAppend(v0, v1);
v1 = oneNewChar('m');
oneAppend(v0, v1);
v1 = oneNewChar('e');
oneAppend(v0, v1);
vRes = token(v0);
if (vRes != NIL) { break; }
oneBacktrack();
v3 = oneNewList();
v4 = oneNewChar('n');
oneAppend(v3, v4);
v4 = oneNewChar('u');
oneAppend(v3, v4);
v4 = oneNewChar('m');
oneAppend(v3, v4);
v4 = oneNewChar('b');
oneAppend(v3, v4);
v4 = oneNewChar('e');
oneAppend(v3, v4);
v4 = oneNewChar('r');
oneAppend(v3, v4);
vRes = token(v3);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v6 = oneNewList();
v7 = oneNewChar('(');
oneAppend(v6, v7);
vRes = token(v6);
if (vRes == NIL) { break; }
x = expr();
vRes = x;
if (vRes == NIL) { break; }
v10 = oneNewList();
v11 = oneNewChar(')');
oneAppend(v10, v11);
vRes = token(v10);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
} while (0);
}

struct oneValue *token(struct oneValue *t)
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
struct oneValue *v14;
struct oneValue *v15;
struct oneValue *v16;
struct oneValue *v17;
struct oneValue *v18;
struct oneValue *v19;
struct oneValue *v20;
struct oneValue *v21;
struct oneValue *v22;
struct oneValue *v23;
struct oneValue *v24;
struct oneValue *v25;
struct oneValue *v26;
struct oneValue *v27;
struct oneValue *v28;
struct oneValue *v29;
struct oneValue *v30;
struct oneValue *v31;
struct oneValue *v32;
do {
do {
v0 = t;
v1 = oneNewList();
v2 = oneNewChar('n');
oneAppend(v1, v2);
v2 = oneNewChar('a');
oneAppend(v1, v2);
v2 = oneNewChar('m');
oneAppend(v1, v2);
v2 = oneNewChar('e');
oneAppend(v1, v2);
vRes = eq(v0, v1);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = name();
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v5 = t;
v6 = oneNewList();
v7 = oneNewChar('n');
oneAppend(v6, v7);
v7 = oneNewChar('u');
oneAppend(v6, v7);
v7 = oneNewChar('m');
oneAppend(v6, v7);
v7 = oneNewChar('b');
oneAppend(v6, v7);
v7 = oneNewChar('e');
oneAppend(v6, v7);
v7 = oneNewChar('r');
oneAppend(v6, v7);
vRes = eq(v5, v6);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = number();
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v10 = t;
v11 = oneNewList();
v12 = oneNewChar('k');
oneAppend(v11, v12);
v12 = oneNewChar('e');
oneAppend(v11, v12);
v12 = oneNewChar('y');
oneAppend(v11, v12);
v12 = oneNewChar('w');
oneAppend(v11, v12);
v12 = oneNewChar('o');
oneAppend(v11, v12);
v12 = oneNewChar('r');
oneAppend(v11, v12);
v12 = oneNewChar('d');
oneAppend(v11, v12);
vRes = eq(v10, v11);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = keyword();
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v15 = t;
v16 = oneNewList();
v17 = oneNewChar('b');
oneAppend(v16, v17);
v17 = oneNewChar('i');
oneAppend(v16, v17);
v17 = oneNewChar('n');
oneAppend(v16, v17);
v17 = oneNewChar('a');
oneAppend(v16, v17);
v17 = oneNewChar('r');
oneAppend(v16, v17);
v17 = oneNewChar('y');
oneAppend(v16, v17);
v17 = oneNewChar('S');
oneAppend(v16, v17);
v17 = oneNewChar('e');
oneAppend(v16, v17);
v17 = oneNewChar('l');
oneAppend(v16, v17);
vRes = eq(v15, v16);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = binarySel();
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v20 = t;
v21 = oneNewList();
v22 = oneNewChar('u');
oneAppend(v21, v22);
v22 = oneNewChar('n');
oneAppend(v21, v22);
v22 = oneNewChar('a');
oneAppend(v21, v22);
v22 = oneNewChar('r');
oneAppend(v21, v22);
v22 = oneNewChar('y');
oneAppend(v21, v22);
v22 = oneNewChar('S');
oneAppend(v21, v22);
v22 = oneNewChar('e');
oneAppend(v21, v22);
v22 = oneNewChar('l');
oneAppend(v21, v22);
vRes = eq(v20, v21);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = unarySel();
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v25 = t;
v26 = oneNewList();
v27 = oneNewChar('(');
oneAppend(v26, v27);
vRes = eq(v25, v26);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = oneMatchString("(");
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
v29 = t;
v30 = oneNewList();
v31 = oneNewChar(')');
oneAppend(v30, v31);
vRes = eq(v29, v30);
if (vRes == NIL) { break; }
vRes = spaces();
if (vRes == NIL) { break; }
vRes = oneMatchString(")");
} while (0);
} while (0);
}

struct oneValue *name()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
do {
x = letter();
vRes = x;
if (vRes == NIL) { break; }
xs = oneNewList();
do {
do {
v1 = letter();
if (v1 != NIL) { break; }
oneBacktrack();
v1 = digit();
} while (0);
if (v1 == NIL) { break; }
oneAppend(xs, v1);
} while (0);
vRes = xs;
if (vRes == NIL) { break; }
v4 = oneNewList();
v5 = x;
oneAppend(v4, v5);
v6 = xs;
vRes = concat(v4, v6);
} while (0);
}

struct oneValue *number()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
do {
v0 = digit();
if (v0 == NIL) {
cs = NIL;
} else {
cs = oneNewList();
oneAppend(cs, v0);
do {
v0 = digit();
if (v0 == NIL) { break; }
oneAppend(cs, v0);
} while (0);
}
vRes = cs;
if (vRes == NIL) { break; }
v2 = cs;
vRes = toInt(v2);
} while (0);
}

struct oneValue *keyword()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
do {
n = name();
vRes = n;
if (vRes == NIL) { break; }
vRes = oneMatchString(":");
if (vRes == NIL) { break; }
v1 = n;
v2 = oneNewList();
v3 = oneNewChar(':');
oneAppend(v2, v3);
vRes = concat(v1, v2);
} while (0);
}

struct oneValue *binarySel()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
do {
do {
c1 = special();
vRes = c1;
if (vRes == NIL) { break; }
c2 = special();
vRes = c2;
if (vRes == NIL) { break; }
v2 = c1;
v3 = c2;
vRes = concat(v2, v3);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
c1 = special();
vRes = c1;
if (vRes == NIL) { break; }
vRes = c1;
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
do {
vRes = oneMatchString("-");
if (vRes == NIL) { break; }
c2 = special();
vRes = c2;
if (vRes == NIL) { break; }
v6 = oneNewList();
v7 = oneNewChar('-');
oneAppend(v6, v7);
v8 = c2;
vRes = concat(v6, v8);
} while (0);
if (vRes != NIL) { break; }
oneBacktrack();
vRes = oneMatchString("|");
} while (0);
}

struct oneValue *unarySel()
{
struct oneValue *v0;
struct oneValue *v1;
do {
n = name();
vRes = n;
if (vRes == NIL) { break; }
v1 = oneMatchString(":");
vRes = !v1;
if (vRes == NIL) { break; }
vRes = n;
} while (0);
}

struct oneValue *digit()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
do {
x = char();
vRes = x;
if (vRes == NIL) { break; }
v2 = x;
v3 = oneNewChar('0');
v1 = ge(v2, v3);
v5 = x;
v6 = oneNewChar('9');
v4 = le(v5, v6);
vRes = and(v1, v4);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

struct oneValue *letter()
{
struct oneValue *v0;
struct oneValue *v1;
struct oneValue *v2;
struct oneValue *v3;
struct oneValue *v4;
struct oneValue *v5;
struct oneValue *v6;
struct oneValue *v7;
struct oneValue *v8;
struct oneValue *v9;
struct oneValue *v10;
struct oneValue *v11;
struct oneValue *v12;
struct oneValue *v13;
struct oneValue *v14;
do {
x = char();
vRes = x;
if (vRes == NIL) { break; }
v3 = x;
v4 = oneNewChar('A');
v2 = ge(v3, v4);
v6 = x;
v7 = oneNewChar('Z');
v5 = le(v6, v7);
v1 = and(v2, v5);
v10 = x;
v11 = oneNewChar('a');
v9 = ge(v10, v11);
v13 = x;
v14 = oneNewChar('z');
v12 = le(v13, v14);
v8 = and(v9, v12);
vRes = or(v1, v8);
if (vRes == NIL) { break; }
vRes = x;
} while (0);
}

