ometa OneTranslator {
    oper = 'Mul' | 'Div' | 'Mod'
         | 'Add' | 'Sub'
         | 'Concat'
         | 'Eq' | 'Ne' | 'Lt' | 'Gt' | 'Le' | 'Ge'
         | 'And'
         | 'Or',

    expr :dest = char:x
                 emitChar(x):c
                 -> (dest + " = oneNewChar(" + c + ");\n")

               | number:x
                 -> (dest + " = oneNewInt(" + x.toString() + ");\n")

               | [ 'list' [ genVar(0):v expr(v)*:xs ] ]
                 ( -> (xs.concat([""])) ):xs // append empty string
                 -> (dest + " = oneNewList();\n" +
                     xs.join("oneAppend(" + dest + ", " + v + ");\n"))

               | [ 'var' string:n ]
                 -> (dest + " = " + n + ";\n")

               | [ 'call' string:n
                   ( -> "" ):xs
                   ( -> "" ):args
                   (
                     genVar(0):v expr(v):x
                     ( -> x ):xs
                     ( -> v ):args
                     (
                       genVar(0):v expr(v):x
                       ( -> (xs + x) ):xs
                       ( -> (args + ", " + v) ):args
                     )*
                   )?
                 ]
                 -> (xs +
                     dest + " = one" + n + "(" + args + ");\n")

               | [ oper:op
                   genVar(0):v expr(v):x
                   genVar(0):w expr(w):y
                 ]
                 -> (x + y +
                     dest + " = one" + op + "(" + v + ", " + w + ");\n")

               | [ 'match' number:x ]
                 -> (dest + " = oneMatchInt(" + x.toString() + ");\n")

               | [ 'enterList'
                   genVar(0):input
                   genNodeVar(0):node
                   expr(dest):x
                 ]
                 -> ("if (oneCurrentNode->value->tag == TAG_LIST) {\n" +
                     input + " = oneInput;\n" +
                     node + " = oneCurrentNode;\n" +
                     "oneInput = oneCurrentNode->value;\n" +
                     "oneCurrentNode = oneInput->listValueFirst;\n" +
                     x +
                     "oneInput = " + input + ";\n" +
                     "oneCurrentNode = " + node + ";\n" +
                     "} else {\n" +
                     dest + " = NIL;\n" +
                     "}\n")

               | [ 'matchList' [ char*:xs ] ]
                 emitString(xs.join("")):s
                 -> (dest + " = oneMatchString(" + s + ");\n")

               | [ 'not' genVar(0):v expr(v):x ]
                 -> (x +
                     dest + " = !" + v + ";\n")

               | [ 'set' [ char*:xs ]
                   ( -> (xs.join("")) ):v
                   addVar(v)
                   expr(v):x ]
                 -> (x +
                     dest + " = " + v + ";\n")

               | [ 'star' genVar(0):v expr(v):x ]
                 -> (dest + " = oneNewList();\n" +
                     "do {\n" +
                     x +
                     "if (" + v + " == NIL) { break; }\n" +
                     "oneAppend(" + dest + ", " + v + ");\n" +
                     "} while (0);\n")

               | [ 'plus' genVar(0):v expr(v):x ]
                 -> (x +
                     "if (" + v + " == NIL) {\n" +
                     dest + " = NIL;\n" +
                     "} else {\n" +
                     dest + " = oneNewList();\n" +
                     "oneAppend(" + dest + ", " + v + ");\n" +
                     "do {\n" +
                     x +
                     "if (" + v + " == NIL) { break; }\n" +
                     "oneAppend(" + dest + ", " + v + ");\n" +
                     "} while (0);\n" +
                     "}\n")

               | [ 'opt' genVar(0):v expr(v):x ]
                 -> (dest + " = oneNewList();\n" +
                     x +
                     "if (" + v + " != NIL) {\n" +
                     "oneAppend(" + dest + ", " + v + ");\n" +
                     "}\n")

               | [ 'sideSeq' expr(dest)*:xs ]
                 -> (xs.join(""))

               | [ 'seq' expr(dest)*:xs ]
                 -> ("do {\n" +
                     xs.join("if (" + dest + " == NIL) { break; }\n") +
                     "} while (0);\n")

               | [ 'alt' genNodeVar(0):node expr(dest)*:xs ]
                 -> (node + " = oneCurrentNode;\n" +
                     "do {\n" +
                     xs.join("if (" + dest + " != NIL) { break; }\n" +
                             "oneCurrentNode = " + node + ";\n") +
                     "} while (0);\n"),

    statement = [ 'stat' [ string:name string*:args ] expr("vRes"):x ]
                ( -> ("struct oneValue *one" + name +
                      "(" + this.defineArgs(args) + ")") ):proto
                addProto(proto)
                -> (proto + "\n" +
                    "{\n" +
                    this.defineVars() +
                    x +
                    "}\n"),

    program = [ (reset(0) statement)*:s ]
              -> ("#include \"../support.c\"\n" +
                  "\n" +
                  this.protos +
                  s.join("\n"))
}

OneTranslator.protos = "";

// reset takes a dummy argument to prevent memoization
OneTranslator.reset = function() {
    this.apply("anything");
    this.counter = 0;
    this.nodeCounter = 0;
    this.vars = [];
};

// genVar takes a dummy argument to prevent memoization
OneTranslator.genVar = function() {
    var r;
    this.apply("anything");
    r = "v" + this.counter.toString();
    this.counter = this.counter + 1;
    return r;
};

// genNodeVar takes a dummy argument to prevent memoization
OneTranslator.genNodeVar = function() {
    var r;
    this.apply("anything");
    r = "vn" + this.nodeCounter.toString();
    this.nodeCounter = this.nodeCounter + 1;
    return r;
};

OneTranslator.addVar = function() {
    var name = this.apply("string");
    if (this.vars.indexOf(name) === -1) {
        this.vars.push(name);
    }
};

OneTranslator.defineVars = function() {
    var i;
    var s = "";

    for (i = 0; i < this.counter; i++) {
        s = s + "struct oneValue *" + "v" + i.toString() + ";\n";
    }
    for (i = 0; i < this.nodeCounter; i++) {
        s = s + "struct oneListNode *" + "vn" + i.toString() + ";\n";
    }
    for (i = 0; i < this.vars.length; i++) {
        s = s + "struct oneValue *" + this.vars[i] + ";\n";
    }
    s = s + "struct oneValue *vRes;\n";
    return s;
};

OneTranslator.defineArgs = function(args) {
    var i;
    var s;

    if (args.length > 0) {
        s = "struct oneValue *" + args[0];

        for (i = 1; i < args.length; i++) {
            s = s + ", struct oneValue *" + args[i];
        }
    } else {
        s = "void";
    }

    return s;
};

OneTranslator.addProto = function() {
    var proto = this.apply("string") + ";";
    this.protos = this.protos + proto + "\n";
};

OneTranslator.emitChar = function(c) {
    if (c === "'") {
        return "'\\''";
    } else if (c === "\n") {
        return "'\\n'";
    } else if (c === "\r") {
        return "'\\n'";
    } else if (c === "\t") {
        return "'\\t'";
    } else {
        return "'" + c + "'";
    }
};

OneTranslator.emitString = function(s) {
    var i;
    var result = "\"";

    for (i = 0; i < s.length; i++) {
        if (s[i] === "\"") {
            result = result + "\\\"";
        } else if (s[i] === "\n") {
            result = result + "\\n";
        } else if (s[i] === "\r") {
            result = result + "\\r";
        } else if (s[i] === "\t") {
            result = result + "\\t";
        } else {
            result = result + s[i];
        }
    }
    result = result + "\"";
    return result;
};
